/* storage Hard Drive v. Flash RAM
    Servers                 USB 
    Desktops                Laptops, phones, tablets
    Cost per Byte low       Cost per Byte High

   Hard Drive
   - spinning disk divided into concentric circles
   - Each circle called a track
   - each track is divided into blocks (sectors)
   - Each block is a fixed size
        - About 4 kilobytes (kb)
   - To read/write to a block 
        - Read-Write head (RWH)
        - Similar to the needle on a record player
        - Within a block there are tiny magnets, each correspoondes to a bit of info
        - info based on orientation
        - RWH needs to sense orientation and realign magnets to store new info
   - Instruct 
        - RWH to go to a track/block
   - HD Driver
        - Driver Software  (ROM)
            -  Read Only Memory
            - standard software to talk to the RWH
            - OS will work with the following primitives
                - Read Block 
                - Write Block
   - Head Crash
        - When the RWH hits the disk at extremely high speed
        - All data lost
        - Occurs after years of use and a extreme amount of Read/Writes
   -  Flash RAM
        - Traps Electrons in silicon
        - Is able to maintain storage through this phenomenon
        - Over time the silicon can degrade causing the electrons to leak and lose content
        - Happens after years
    - Uses Same Driver Software
        - Blocks have a limited amount of Read/Writes before blocks begin to degrade
        - Software can alternate which blocks are in use
        - Same primitives
            - Read Block
            - Write Block
     - File System Example
        - Desktop 
            - ENGL220
               - paper1.docx
        - /Users/ethan/Desktop/Documents/ENGL220/paper1.docx
        - The notion of / being a root directory
        - Where everything begins "Superblock"
            - Block 0 on the disk
            - Contain info to let OS know whats going on on the disk
            - Can tell the OS where "/" is on the disk 
               - Contains a pointer to the root directory
               - # files stored
               - Contains a "signature" 
                    - No one file system - tells what type file system being used
     - Where is the root directory 
        - what is a folder and what is a file?
        - a direcrtory is a type of file
        - Files do not need to be saved to consecutive blocks at all 
     - File system is no more than a data sturcture
        - Tree/Graph?
        - INode
               - Index Node
               - Total Bytes stored in file
                    - Basically so you know where to stop reading blocks
               - What blocks is it occupying
                    - Fixed size array containing the nth block the file is on
               - Pointer to another INode if file too big 
               - resident disk data sturcture
                    - May have to tell the RWH to go to another INode, Takes time
        - Block 0 Superblock
        - Couple blocks for occupancy
               - INodes in use (Max Num of INodes)
               - Num Data Blocks
        - Several Blocks for INode Table 
               - Array of INodes 
        - Data Blocks contains the rest of the Disk 
               - Filename and INode number is all thats on Disk??


File Systems
     - Read(block)
     - Write(block)
     - have to turn these into C:\Users\username\file\file\file.exe
          - C:\
          - the \ is a predefinied file at INode #0 
          - Go to Superblock, then points to INode table, finds INode 0 (All Inodes Fixed Size)
          - Inode 0 will have the data blocks listed that contain the info in the file
          - OS will load the blocks listed in INode 0 into RAM 
               - OS will need to need to have some Standing Buffer space for operations
          - This directory will contain filenames and the corresponding INode# 
               - adds up to 64 Bytes between the filename and Inode #
               - need a terminating character usually '\0'
          - For each entry in RAM (64 bytes at a time)
               - Does our filename match     
               - if it does, grab INode #
                    - Gotta go back to the disk 
                    - Ask disk for INode table entry 
                    - repeat this process until we reach final file in path     
                         - in this case file.exe 
                         - Kernel has intrinsic File Table (Fixed Size Array) 
                              - A File Table Entry includes 
                                   - Inode #
                                   - Inode 
                                   - Current block being read
                                   - offset into block being read (i.e. where in block we are)
                              - creates file descriptor for the file 
                         - Read 1st block into buffer 
                         - Read system call 
                              - copy buffer.len() bytes from OS buffer to User Buffer 
                              - IF we exhaust a block, 
                                   - Update current block
                                        - Increment current block
                                        - Reset offset to 0
                                        - load new block into RAM 
                                             - overwrite the file descriptor with the new contents
                              - track the total number of bytes read 
                         - close the file, by nuking the filetable entry 
                              - on a write need to be more carefule, there's extra stuff
                                   - have to write the new INnode and INode info 
               - if it doesn't find a file OS returns an error message
                    - OS never crashes or Panics, just returns an error message 

Garbage Collectors
     - Mark/Sweep
          - Mark
               - Out of Memory?
               - For every live variable in program
                    - mark the heap block at which it points
                    - Recusursively track internal references 
          - Sweep
               - Traverse all blocks
               - free all unmarked blocks
     - Copying 
          - break heap into 2 regions 
               - can be broken down further but for simplicity sticking with 2
          - only allocate from one region
          - Allocation 
               - store and update start pointer
          - For every live variable 
               - Recusursively copy the block to second part of heap
               - Wipes first part clean
          - gets rid of heap fragmentation by consecutive storage
          - also eliminates sweep phase only concerend with blocks with live pointers
          - copying very block is very expensive
     - Generational 
          - Start with copying Collector 
          - When copy, heirarchical copy levels, 
               - If copied several times, moved to mark/sweep destination space 
          - objects are either short lived or live for most of the program 
     


------Priority and Processes ------------
- Priority dictated by use of a Multi-level queue
     - Queue of Arrays, 0-x where 0 is highest Priority array 

- Priority Assignment 
     - Multi - Level Feedback Queue
          - used in every major operating system except linux 
          - There does exist a unix command called "nice" 
               - Says this process is a heavy cpu user and sets low priority to a process
          1. All new processes have priority 0
               - many, if not nost, new processes complete quickly 
          2. if a process blocks before using up it's time slice, gets to keep its priority
               - Add up all total time usage, when at total cap drop priority
          3. if a process consumes its time slice, it goes down 1 level in priority 
          4. Every once in a while send all processes to level 0

     - Proportional Scheduler 
          - "Budget" availible, scheduler picks what to run based on given Budget
          - Lottery Scheduler
               - Servers, QEMU, Webhosting, etc. 
               - $1/"ticket" 
               - who gets scheduled depends on number of tickers they have 
               - Scheduling interval 
                    - Amount of time in which a given process will run until the next ticket is picked
                    - Ramdomly pick a ticket, whoever owns said ticket gets the cpu/run time 
               - To pick a ticket  
                    - Generate random number between 1-(total num tickets)
                    - check to see if random num is greater than largest num tickets held, 
                    - if it is subtract and repeat process for next element in ticket holders list 
                    - otherwise run the largest holder 
               - Given enough time and a good random number generator 
                    - all get the correct amount of cpu time proportional to tickets purchased 
               - Could be used to allocate/determine storage and other resources as long as you can distribute the tickets 
               - If there are too many tikcets bought/job requests, 
                    - usually limited to num tickets per server
                    - bring more hardware online 
                    - try to maximize bang for buck in hardware usage 
     
     - Linux Scheduler
          - Completely Fair Scheduler 
          - Sched_latency 
               - Represents a budget of time slices   

     - History of Computers and OS Programming
          - Apple
               - 1986 realeased the Macintosh
               - first commercial OS that had Windowing capabilities
          - Linux 
          - IBM
               - Responsible for the development of hte mainframe 
               - First high level compiler known as Fortran
               - MicroCopmuters developed in the 1970s
                    - Almost Purely for Hobbyist 
                    - Altair most famously 
                    - Late 70s IBM PC 
               - IBM PC 
                    - IBM outsourced the cpu to intel 
                         - Intel 8088
                              - Sucessor Chips 8086, 80286, 80386 (Linux), 80486
                              - CPU architecture called x86
                                   - ALl backwards compatible 
                                   - Executible from 8086 could run on Pentium

                    - Outsourced the OS to Microsoft  
                         - Microsoft wanted to retain the copywrite for the OS 
                              - MS-DOS (Microsoft Disk Operating System)
                              - DOS ran on vga buffer, had that font 
                              - had a command prompt (used backslash instead of forward slash)
                         - 88-89 Windows 3.0 released with windowing capabilities 
                              - was originally an application ran from the DOS command line
          - Several companies figured out they could buy intel chips and MS-OS 
               - Make thier own PCs for about a third of teh price of an IBM machine and sell it for half
          - Windows became the brand focused around 1990
          - 1990-1994
               - Mac was king of consumer PC, but very expensive 
               - Mac OS was seamless and elegane whereas MS was clunky 
          - Windows 95
               - released in 1995 
               - Windows 95 on a PC clone with an Intel Pentium took over the world
               - 90% of desktops about 
          - 1993 
               - first web browser made 
               - World Wide Web popularized in 95
               - Java realeased in 1995 as a web language 
          - 1998 
               - MS windows "Monopoly" on the desktop 
               - Due to an Anti-Trust lawsuit, MS allowed users to download and run other web browsers
               - Linux got super popular (Dual boot on cpu bc windows ran vidoegames better, linux on the other half on cpu)
               - Linux didn't have windowing, so companies took the linux Kernel, GNU tools, and then added a windowing component
                    - known as a linux Distribution
                    - Android is a Linux Distribution 
                    - This happened bc windows was getting more expensive and wasn't a great server language 
                    - Different Distributions used different window managers
                         - Gnome
                         - KDE
                    - fragmentation was bad for developement of linux as consumer os 
                    - However, linux dominated the sever software market 


     - The Four Freedoms from the GNU Projects 
          - 0 Freedom to use software for ANY purpose
          - 1 Freedom to change software to meet your needs 
          - 2 Freedom to share software 
          - 3 Freedom to share the changes in software 
     - GPL 
          - GNU Public Liscense 
          - Copyleft 
               - "All rights reversed"
               - Users are guarunteed the 4 freedoms 
               - when software is changed and shared must also adhere to GPL 
          - make it hard to make said software proprietary 
     - Open Source Initiative 
          - 
*/

